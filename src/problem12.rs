/// The sequence of triangle numbers is generated by adding the natural
/// numbers. So the 7th triangle number would be
/// 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
/// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
/// Let us list the factors of the first seven triangle numbers:
///     1: 1
///     3: 1,3
///     6: 1,2,3,6
///     10: 1,2,5,10
///     15: 1,3,5,15
///     21: 1,3,7,21
///     28: 1,2,4,7,14,28
/// We can see that 28 is the first triangle number to have over five divisors.
/// What is the value of the first triangle number to have over five hundred
/// divisors?
use crate::utils::*;

pub fn main() -> i32 {
    fn get_num_of_divisors(primes: &Vec<i64>, v: &i32) -> i32 {
        let mut v: i32 = *v;
        let mut d: i32 = 1;
        for p in primes.iter().map(|p| *p as i32) {
            let mut e: i32 = 1;
            while v % p == 0 {
                e += 1;
                v /= p;
            }
            d *= e;
            if v == 1 {
                return d;
            }
        }
        panic!("not enough primes generated");
    }

    let lim: i32 = 500;
    let primes: Vec<i64> = get_primes_less_than(100_000);

    let mut val: i32 = 1;
    let mut inc: i32 = 2;
    loop {
        let num_div: i32 = get_num_of_divisors(&primes, &val);
        if num_div > lim {
            return val;
        }
        val += inc;
        inc += 1;
    }
}
